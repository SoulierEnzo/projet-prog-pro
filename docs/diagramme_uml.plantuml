@startuml
title Architecture du simulateur d'entretien

skinparam linetype ortho
skinparam shadowing false
skinparam ArrowThickness 1
skinparam ArrowColor #444444
skinparam classFontSize 12
skinparam classAttributeFontSize 11
skinparam classFontColor #222222
skinparam ArrowFontSize 11
skinparam ArrowFontColor #333333
skinparam ArrowFontStyle italic
skinparam Padding 10
skinparam RankSep 60
skinparam NodeSep 50
skinparam packageStyle rectangle

' ============================================================
'                       UI
' ============================================================
package "UI" {
  class ConsoleUI {
    +startInterview()
    +displayQuestion(q: Question)
    +getUserResponse(): String
    +displayFeedback(feedback: String)
  }
}

' ============================================================
'                       Agent
' ============================================================
package "Agent" {
  class InterviewAgent {
    +startInterview(cv: String, offer: String)
    +generateQuestion(): Question
    +processResponse(r: Response)
  }

  class Memory {
    +cvPath: String
    +jobOfferPath: String
    +getContext(): String
  }

  class FeedbackModule {
    +analyzeResponse(r: Response): String
  }

  class EvaluationAgent {
    +evaluatePerformance(responses: List<Response>): String
    +generateScoreReport(): String
  }
}

' ============================================================
'                       API
' ============================================================
package "API" {
  class OllamaClient {
    +askModel(prompt: String): String
  }
}

' ============================================================
'                       Model
' ============================================================
package "Model" {
  class Question {
    +text: String
  }

  class Response {
    +answer: String
  }
}

' ============================================================
'                       Relations
' ============================================================
ConsoleUI --> InterviewAgent : contrôle
InterviewAgent --> Memory : utilise / met à jour
InterviewAgent --> FeedbackModule : demande analyse
InterviewAgent --> OllamaClient : envoie prompt à
FeedbackModule --> OllamaClient : exploite
Memory *-- Response : stocke
InterviewAgent --> Question : pose
InterviewAgent --> Response : reçoit
Response --> Question : "répond à"

EvaluationAgent --> OllamaClient : utilise pour analyse sémantique
EvaluationAgent --> Memory : consulte le contexte
EvaluationAgent --> Response : évalue les réponses
ConsoleUI --> EvaluationAgent : affiche le score final

@enduml
